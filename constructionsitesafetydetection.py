# -*- coding: utf-8 -*-
"""constructionsitesafetydetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGFhl0pHZ4OTQA-cDw_3lczS7jt5OlHF
"""

!pip install ultralytics

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings, os, shutil, cv2, random
warnings.filterwarnings('ignore')
from ultralytics import YOLO
from tqdm.notebook import tqdm
from collections import Counter, defaultdict

import kagglehub

# Download latest version
BASE_DIR = kagglehub.dataset_download("snehilsanyal/construction-site-safety-image-dataset-roboflow")
BASE_DIR= "/kaggle/input/construction-site-safety-image-dataset-roboflow/css-data"
print("Path to dataset files:", BASE_DIR)

OUTPUT_DIR = '/kaggle/working/yolo_dataset'
IMAGES_DIR = os.path.join(OUTPUT_DIR,'images')
LABELS_DIR = os.path.join(OUTPUT_DIR,'labels')

for split in ['train','val','test']:
    os.makedirs(os.path.join(IMAGES_DIR,split),exist_ok=True)
    os.makedirs(os.path.join(LABELS_DIR,split),exist_ok=True)

for split in ['train', 'valid', 'test']:
    split_new = 'val' if split == 'valid' else split
    img_dir = os.path.join(BASE_DIR, split, 'images')
    lbl_dir = os.path.join(BASE_DIR, split, 'labels')

    for fname in tqdm(os.listdir(img_dir)):
        if fname.endswith(".jpg"):
            # Copy image
            shutil.copy2(os.path.join(img_dir, fname), os.path.join(IMAGES_DIR, split_new, fname))
            # Copy label
            label_name = fname.replace(".jpg", ".txt")
            shutil.copy2(os.path.join(lbl_dir, label_name), os.path.join(LABELS_DIR, split_new, label_name))

def visualize_sample(image_path, label_path):
    image = cv2.imread(image_path)
    h, w, _ = image.shape

    with open(label_path, 'r') as f:
        for line in f:
            parts = line.strip().split()
            class_id, x_center, y_center, width, height = map(float, parts)
            x1 = int((x_center - width/2) * w)
            y1 = int((y_center - height/2) * h)
            x2 = int((x_center + width/2) * w)
            y2 = int((y_center + height/2) * h)
            cv2.rectangle(image, (x1, y1), (x2, y2), (0,255,0), 2)
            cv2.putText(image, str(int(class_id)), (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,255,0), 1)

    plt.figure(figsize=(10,6))
    plt.axis('off')
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.show()

for _ in range(5):
    sample_img = os.path.join(IMAGES_DIR, 'train', random.choice(os.listdir(os.path.join(IMAGES_DIR, 'train'))))
    sample_lbl = sample_img.replace('images', 'labels').replace('.jpg', '.txt')
    visualize_sample(sample_img, sample_lbl)

# Write data.yaml file
with open(os.path.join(OUTPUT_DIR, "data.yaml"), "w") as f:
    f.write(f"""
    train: {IMAGES_DIR}/train
    val: {IMAGES_DIR}/val

    nc: 10
    names: ["Hardhat","Mask","NO-Hardhat","NO-Mask","NO-Safety Vest","Person","Safety Cone","Safety Vest","machinery","vehicle"]
    """)

# Load model
model = YOLO('yolov8n.yaml')

# Train model
model.train(
    data=os.path.join(OUTPUT_DIR,'data.yaml'),
    epochs=150,
    imgsz=640,
    batch=32,
    project=OUTPUT_DIR,
    name="construction_site_safety_detection_model",
    verbose=True
)

# Path to test images
test_dir = os.path.join(OUTPUT_DIR,'images','test')
test_images = [f for f in os.listdir(test_dir) if f.lower().endswith(('.jpg', '.png', '.jpeg'))]

# Store class counts and confidence scores
class_counter = Counter()
confidence_scores = defaultdict(list)

# Load class names from model
class_names = model.names

# Run inference on random N samples
for _ in range(10):  # run on 10 random samples
    image_file = random.choice(test_images)
    image_path = os.path.join(test_dir, image_file)
    result = model(image_path)[0]

    img = cv2.imread(image_path)

    for box in result.boxes:
        cls_id = int(box.cls[0])
        score = float(box.conf[0])
        x1, y1, x2, y2 = map(int, box.xyxy[0])

        class_name = class_names[cls_id]
        label = f"{class_name} {score:.2f}"

        # Update stats
        class_counter[class_name] += 1
        confidence_scores[class_name].append(score)

        # Draw box + label
        cv2.rectangle(img, (x1, y1), (x2, y2), color=(0, 255, 0), thickness=2)
        cv2.putText(img, label, (x1, y1 - 10),
                    fontFace=cv2.FONT_HERSHEY_SIMPLEX,
                    fontScale=0.6, color=(0, 0, 255), thickness=2)

    # Show image
    plt.figure(figsize=(10, 6))
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title(f"Prediction: {image_file}")
    plt.show()

# Plot: Class-wise object counts
plt.figure(figsize=(8, 5))
plt.bar(class_counter.keys(), class_counter.values(), color='orange')
plt.title("Class-wise Object Count (Test Inference)")
plt.ylabel("Number of Detections")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot: Confidence Score Histogram
plt.figure(figsize=(10, 5))
for cls, scores in confidence_scores.items():
    plt.hist(scores, bins=10, alpha=0.6, label=cls)

plt.title("Confidence Score Distribution per Class")
plt.xlabel("Confidence Score")
plt.ylabel("Frequency")
plt.legend()
plt.tight_layout()
plt.show()

from ultralytics import YOLO

# Load the trained model
model = YOLO('/kaggle/working/yolo_dataset/construction_site_safety_detection_model2/weights/best.pt')

from google.colab import drive
drive.mount('/content/drive')

image_path = '/Screenshot 2025-06-10 at 2.28.52â€¯AM.png'

import cv2
import matplotlib.pyplot as plt

img = cv2.imread(image_path)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

results = model.predict(image_path, imgsz=640, conf=0.25)
result = results[0]  # first image's results
print("Classes detected:", result.boxes.cls.tolist())       # e.g. [8]
print("Confidences:", result.boxes.conf.tolist())           # e.g. [0.33]
print("Bounding boxes:", result.boxes.xyxy.tolist())        # bounding box coordinates
print("Class names:", result.names)                         # maps class ID to name
result.show()

